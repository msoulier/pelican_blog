<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>But I Digress</title><link>http://www.but-i-digress.ca/</link><description></description><atom:link href="http://feeds.feedburner.com/feeds/technology.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 19 Jan 2014 19:30:00 -0500</lastBuildDate><item><title>Validation with Server-side call in AngularJS</title><link>http://www.but-i-digress.ca/validation-server-call-angularjs.html</link><description>&lt;p&gt;I've been playing with &lt;a class="reference external" href="http://www.angularjs.org"&gt;AngularJS&lt;/a&gt; for a little while, and in trying to
understand how to validate a user's data as it's being entered, it didn't take
long to find that to check with the server for some validation rules, like
uniqueness constraints.&lt;/p&gt;
&lt;p&gt;This presented a problem since the built-in validators know nothing about the
data on the server. I looked into the issue and found that creating my own
directive was the way to go. Difficult when I'm an AngularJS newbie and I
barely understand such things, but luckily the AngularJS online community was
helpful. To validate the uniqeness of an &amp;quot;ICP&amp;quot; (don't ask) when the user stops
typing, it's not overly difficult.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uniqueIcpName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$http&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;restrict&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ngModel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//when the scope changes, check&lt;/span&gt;
            &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if there was a previous attempt, stop it.&lt;/span&gt;
                &lt;span class="nx"&gt;$timeout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueIcpName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// Determine the url based on whether this is an add or a&lt;/span&gt;
                &lt;span class="c1"&gt;// modify.&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueIcpName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/valid/icp/add/name/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/valid/icp/modify/name/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// start a new attempt with a delay to keep it from&lt;/span&gt;
                &lt;span class="c1"&gt;// getting too &amp;quot;chatty&amp;quot;.&lt;/span&gt;
                &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// call to some API that returns { isValid: true } or&lt;/span&gt;
                    &lt;span class="c1"&gt;// { isValid: false }&lt;/span&gt;
                    &lt;span class="nx"&gt;$http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nx"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$setValidity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uniqueIcpName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The timeout is a neat trick someone taught me, so you launch the event on every
keypress, but on the next keypress you cancel the previous one, and put in a
500ms delay on the ReST call, so you don't really make the request until the
user stops typing for a full half second. Meanwhile I put in a little attribute
check based on creation vs. modification of the data, since uniqueness checks
must exclude the current object on a modification.&lt;/p&gt;
&lt;p&gt;Then all you need is the server-side returning an &lt;cite&gt;isValid&lt;/cite&gt; attribute, which
should have a boolean value. Simple, and it works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 19 Jan 2014 19:30:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2014-01-19:validation-server-call-angularjs.html</guid><category>AngularJS</category><category>ReST</category></item><item><title>Getting RunSnakeRun Working on Mac OS X</title><link>http://www.but-i-digress.ca/getting-runsnakerun-osx.html</link><description>&lt;p&gt;As I &lt;a class="reference external" href="http://www.but-i-digress.ca/fruit-on-my-screen.html"&gt;mentioned previously&lt;/a&gt;, I have a Mac Mini at home as a workstation. While
some things are easier working with it, like video editing, and basic office
productivity, some things are harder.&lt;/p&gt;
&lt;p&gt;One of the harder areas on OS X is customizing the Unix side of it for my
development environment on Linux. I work primarily with Python, which does
ship with Mountain Lion (Python 2.7), but it doesn't have everything. For
example, the incredibly useful &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; was something that I had to add
on later, and many things I pulled from the &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; project, which has
been incredibly useful to a Linux geek like me.&lt;/p&gt;
&lt;p&gt;I currently have a strong need to profile my work, and there's no
substitute to the impressive work of &lt;a class="reference external" href="http://www.vrplumber.com/programming/runsnakerun/"&gt;RunSnakeRun&lt;/a&gt;. RunSnakeRun requires
&lt;a class="reference external" href="http://www.wxpython.org/"&gt;wxPython&lt;/a&gt;, which requires wxGtk, which requires wxWindows, etc, etc. One
simple way to get wxPython on Mac is Homebrew, where it's called &lt;cite&gt;wxMac&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew install wxmac
&lt;/pre&gt;
&lt;p&gt;That works just fine, although it does not, at present, update the PYTHONPATH
to include it. I found this was required to put it into the path:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo cat /usr/local/lib/python2.7/site-packages &amp;gt; \
    /Library/Python/2.7/site-packages/wx.pth
&lt;/pre&gt;
&lt;p&gt;At which point, you should be able to &amp;quot;import wx&amp;quot; in python, and it should
work. Now, RunSnakeRun can be easily installed in a virtualenv, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkvirtualenv snake
pip install SquareMap RunSnakeRun
&lt;/pre&gt;
&lt;p&gt;The problem is that wx requires permission to access the display on the Mac. I
don't know the details of this, but Robin Dunn of wxPython fame goes into
the issue &lt;a class="reference external" href="http://wiki.wxpython.org/wxPythonVirtualenvOnMac"&gt;here, with a solution&lt;/a&gt;. His solution is a bit old, and I'm running
Mountain Lion, so I adapted it a bit.&lt;/p&gt;
&lt;p&gt;The python executable is simply &lt;cite&gt;/usr/bin/python&lt;/cite&gt;, so I just did this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(snake)msoulier&amp;#64;merlin:~/envs/snake$ cat ~/envs/snake/bin/runwx
#!/bin/bash

PYVER=2.7
PYTHON=/usr/bin/python

ENV=$HOME/envs/snake

export PYTHONHOME=$ENV
exec $PYTHON &amp;quot;$&amp;#64;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Now, the silly indirection of easy_install makes this a little tougher. You
can't just run the runsnake script with this wrapper, as it apparently invokes
the actual runsnake.py script in some indirect manner that results in losing
desired environment we're trying to establish here. If I understood
what easy_install was doing better, I could likely hack it, but I kept it
simple, and just run the &lt;cite&gt;runsnake.py&lt;/cite&gt; directly with the wrapper:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
runwx ./lib/python2.7/site-packages/runsnakerun/runsnake.py \
    ~/mycode.prof
&lt;/pre&gt;
&lt;p&gt;And, it works!&lt;/p&gt;
&lt;p&gt;Improvements welcome. I'm just happy that it's working. Not everything &amp;quot;just
works&amp;quot; when you're on a Mac.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 03 Nov 2013 10:20:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2013-11-03:getting-runsnakerun-osx.html</guid><category>OS X</category></item><item><title>Scripting RSA Encryption</title><link>http://www.but-i-digress.ca/scrypting-rsa-encryption.html</link><description>&lt;p&gt;So, I have an &lt;a class="reference external" href="http://oauth.net/core/1.0/"&gt;OAuth 1.0&lt;/a&gt; implementation for work that I'm extending, and the
one area of OAuth 1.0 that I didn't implement was &lt;a class="reference external" href="http://oauth.net/core/1.0/#anchor19"&gt;RSA-SHA1&lt;/a&gt; signatures, as I
didn't think that anyone would care. Of course, someone cares. So, I'm looking
into them now, and looking into how to work with RSA in Perl and Python.&lt;/p&gt;
&lt;p&gt;I thought it would be painful, but it's actually refreshingly easy. Here's a
&lt;a class="reference external" href="https://www.dlitz.net/software/pycrypto/"&gt;PyCrypto&lt;/a&gt; example from Python, where PyCrypto was a simple &lt;cite&gt;pip install
pycrypto&lt;/cite&gt; in a virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.PublicKey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RSAKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;RSAKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exportKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PEM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="n"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt; &lt;span class="n"&gt;PRIVATE&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="n"&gt;MIICWwIBAAKBgQC1v8OaZ83&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;er082XyLcwCeFfgT5urSlORbdRTWGc95EilUFQ5E&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;uQ9gafAzjh09PJmnQOeMH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uJQGDmvAW4n9ilKWB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n6e7Yk8FA56fPA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Fnb8oJ&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;
&lt;span class="n"&gt;f4KhhChMvhyRwrpMR03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bQgERVzu8bxLm1zKVxDpzytzKVc6PxAXXPcFeQIDAQAB&lt;/span&gt;
&lt;span class="n"&gt;AoGAB3ATlywMWA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;tWrrSFFszJ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;oGKtpd1SPDfq2te&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DtsCY7bCKKoaIP304Ic&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;VxU1zIxxbWCZsKI71PV43ndcJ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;npXG8AfI6gX6TPDKlStFnUmUe5gfLdFqxi8ES&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;c7Il9wV7THnNTIdZHPTTkMA&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e3IOTD34wDj&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dUD1lvvBgECQQDKPnFEjIDg6&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;E0&lt;/span&gt;
&lt;span class="n"&gt;IvmI3ZXGXptqEPHyS6FPqtWSUqEWqb5AxjORgBpSaW3BiE5iYSwlSec9qn6S8zQN&lt;/span&gt;
&lt;span class="n"&gt;Y0gdCXDZAkEA5g7DeFPjzTEjyqj&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;db0zFv6dyaN3H0MN762HBKW&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ny8KLjsSB2q&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;zSMVdV788Gvfh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;vyz6GK&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bzMzva6qdVoQJAP2KqpU1T5yqGfoynoJmyI2XrV6bP&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;Zx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;hjWIkj&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;LdUrl8e8somF&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;mxklc9eob7K0zUCYHVbDjtjCP8gztjyoQJAbHy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;zul4flXS9Am3mcTRUeF5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mAu&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;GMXzOt7bEoEt8GRHscYbROtTei&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dlQ4u7&lt;/span&gt;
&lt;span class="n"&gt;wZNtgCQHUbzDIm7goQJAO7Krl8p4HXTWlPCnVZk5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;R4OxlQOCF7KeEPLBZaduQn&lt;/span&gt;
&lt;span class="n"&gt;InJUtIPdV&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;aOGt3bp7bKgZqMMe5uZ&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vHIAv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;OlIX&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="n"&gt;END&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt; &lt;span class="n"&gt;PRIVATE&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pubkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RSAKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publickey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pubkey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exportKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PEM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="n"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;PUBLIC&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="n"&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1v8OaZ83&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;er082XyLcwCeFfgT&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;urSlORbdRTWGc95EilUFQ5E4uQ9gafAzjh09PJmnQOeMH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uJQGDmvAW4n9ilKWB&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n6e7Yk8FA56fPA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Fnb8oJ&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Xf4KhhChMvhyRwrpMR03&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bQgERVzu8bxLm1zKVxDp&lt;/span&gt;
&lt;span class="n"&gt;zytzKVc6PxAXXPcFeQIDAQAB&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="n"&gt;END&lt;/span&gt; &lt;span class="n"&gt;PUBLIC&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the only issue here is that I'm not sure how to put the public key into
PKCS#1 format, where it starts with &amp;quot;BEGIN RSA PUBLIC KEY&amp;quot;. It's pretty obvious
in the Perl API though.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;use Crypt::OpenSSL::Random;
use Crypt::OpenSSL::RSA;

print &amp;quot;Seeding prng...\n&amp;quot;;
Crypt::OpenSSL::Random::random_egd(&amp;#39;/dev/urandom&amp;#39;);
Crypt::OpenSSL::RSA-&amp;gt;import_random_seed();

print &amp;quot;Generating 1024-bit pair...\n&amp;quot;;
$rsa = Crypt::OpenSSL::RSA-&amp;gt;generate_key(1024);

print &amp;quot;private key is:\n&amp;quot;, $rsa-&amp;gt;get_private_key_string();
print &amp;quot;public key (in PKCS1 format) is:\n&amp;quot;,
    $rsa-&amp;gt;get_public_key_string();
print &amp;quot;public key (in X509 format) is:\n&amp;quot;,
    $rsa-&amp;gt;get_public_key_x509_string();

# perl gencert.pl
Seeding prng...
Generating 1024-bit pair...
private key is:
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDSwv8lhOF83/uoMJrNLPIRjarl5+EGB0fEiGAEEKByrM+VJOIU
z2cvRfJfvNkcB+XzjXlHLSTnM0hI/PGCTyS5Ym119f5svNkLi3gKKs7WRf0xWVKj
X27HIXP5OSXsS6M/d06HyHfJ3vp44e9sWQ1qDoFH8+elixh/vVH8TEpiBQIDAQAB
AoGAWj0bOVk3olvUSCLnZMnFqzZY4a7ybb5YQBGT6qmjyPWsu1LbacWTjG4KZGtb
GeFX13vPXWY60rLmVDnYvc5dDis+wDu8/JQDelV3zbq9fdRchi+QtJCsPbvMN2VU
8sFK8JpWFPpfmyxgLk8VHfKqihSWWr7Eh2ywuQN/yG/3/FECQQD8HkewAitxM+BU
TCpwoZJIs8x/ZKg1hYdMqOiqhnIWjwoIdGfK4WUjHc3JTpoyHyn//I4l2896T7Cq
5Y/j9iqLAkEA1gG13AjOS9O/zqv49RWA19wS0E42aoiFNFnoEm7wyjYX+KmYYKlI
ak419axFN5qHJ0sb7Me4RqWmfU4PyjyHrwJAb9HSQ8tCj0vN5DV/4UKYCezM93ei
b1KQ5rxHrVJCCaVZctSGMGJ1o/SVEALvuuk9jI7sUPhD9mCf37w/bIEC7wJAJNqK
jOffTuOaRmcLKnmXhJTbkI/HgzUba1aIRpRgVxJVsnbSTOMaG2R4mmQeT2MHH1cp
6e7C5zejojSNN5CQ9QJBAMqkN/IGp/Y7gelca9SAYNceIdsg2LMla/pQ7+Zd43OE
J6za7+RkeqGhMH95ON/2HctnDdqt/vp8lGMxLpwxk7U=
-----END RSA PRIVATE KEY-----
public key (in PKCS1 format) is:
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBANLC/yWE4Xzf+6gwms0s8hGNquXn4QYHR8SIYAQQoHKsz5Uk4hTPZy9F
8l+82RwH5fONeUctJOczSEj88YJPJLlibXX1/my82QuLeAoqztZF/TFZUqNfbsch
c/k5JexLoz93TofId8ne+njh72xZDWoOgUfz56WLGH+9UfxMSmIFAgMBAAE=
-----END RSA PUBLIC KEY-----
public key (in X509 format) is:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSwv8lhOF83/uoMJrNLPIRjarl
5+EGB0fEiGAEEKByrM+VJOIUz2cvRfJfvNkcB+XzjXlHLSTnM0hI/PGCTyS5Ym11
9f5svNkLi3gKKs7WRf0xWVKjX27HIXP5OSXsS6M/d06HyHfJ3vp44e9sWQ1qDoFH
8+elixh/vVH8TEpiBQIDAQAB
-----END PUBLIC KEY-----
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, seeding from &lt;cite&gt;/dev/urandom&lt;/cite&gt; is bad, this is just a simple example. The
point is that picking the output format of the public key is trivial in Perl,
but not in Python. I'm not sure why PyCrypto has this limitation. I can convert
from X-509 to PKCS#1 with a one-liner...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# perl -MCrypt::OpenSSL::RSA -MCrypt::OpenSSL::X509 -e &amp;#39;$rsa =&lt;/span&gt;
&lt;span class="nn"&gt;Crypt::OpenSSL::&lt;/span&gt;&lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;new_public_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Crypt::OpenSSL::&lt;/span&gt;&lt;span class="n"&gt;X509&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;new_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pubkey&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$rsa&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;get_public_key_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="sr"&gt;/var/c&lt;/span&gt;&lt;span class="n"&gt;ache&lt;/span&gt;&lt;span class="sr"&gt;/mslrest/c&lt;/span&gt;&lt;span class="n"&gt;erts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;google_cert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt; &lt;span class="n"&gt;PUBLIC&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="n"&gt;MIGJAoGBANBRXu6Qh8iLFuiQc40Yxb3553QT1fib30jy6k9CneIC2oi9aztcJsBs&lt;/span&gt;
&lt;span class="n"&gt;arNAfWpf1jTSGtDlFFCPw4je1GJCz8p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MZY528ukiTmhel1Pny2DgWViHl9uEihW&lt;/span&gt;
&lt;span class="n"&gt;hWfga&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;KMqYkWygzw1G0QkcvVpZ3751fORCMSw1wFfBC98NvRidtAgMBAAE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt; &lt;span class="n"&gt;PUBLIC&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My understanding on these formats is limited, so hopefully someone more
knowledgeable can comment. Right now I want PKCS#1 because we have a tool at
work that expects it as input.&lt;/p&gt;
&lt;p&gt;Anywho, quite nice that basic RSA keys are so simple to work with. I wish I
could find some simple calls to make a CSR, without wrapping the openssl command
line. I can't seem to find one, and it terribly overlooked in O'Reilly's
&amp;quot;Network Security with OpenSSL&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Tue, 20 Aug 2013 08:30:00 -0400</pubDate><guid>tag:www.but-i-digress.ca,2013-08-20:scrypting-rsa-encryption.html</guid><category>Crypto</category><category>Python</category><category>Perl</category></item><item><title>Java, usable but pointlessly difficult</title><link>http://www.but-i-digress.ca/java-pointlessly-difficult.html</link><description>&lt;p&gt;I've been working on a REST client in Java at work lately. I know, it scares
me too. I've had to revisit much of my old Java knowledge, and pick up a lot
of new chops in Swing, Eclipse, and author a decent JSON-parsing HTTPS client.&lt;/p&gt;
&lt;p&gt;Our internal servers use self-signed SSL certs at work, so to talk to them I
had to disable any host-certificate checking. Should be a simple boolean in
the API right? Wrong. I forgot. Java.&lt;/p&gt;
&lt;p&gt;First, you need to install your own trust manager.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.net.ssl.X509TrustManager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.cert.X509Certificate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.net.ssl.SSLContext&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.net.ssl.HttpsURLConnection&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;TrustManager&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;trustAllCerts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TrustManager&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;X509TrustManager&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="nd"&gt;@Override&lt;/span&gt;
     &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;security&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;X509Certificate&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getAcceptedIssuers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="nd"&gt;@Override&lt;/span&gt;
     &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkClientTrusted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X509Certificate&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;certs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;authType&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="nd"&gt;@Override&lt;/span&gt;
     &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkServerTrusted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X509Certificate&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;certs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;authType&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="o"&gt;}};&lt;/span&gt;
 &lt;span class="c1"&gt;// Install this trust manager.&lt;/span&gt;
 &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;SSLContext&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSLContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SSL&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trustAllCerts&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;security&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SecureRandom&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
     &lt;span class="n"&gt;HttpsURLConnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDefaultSSLSocketFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSocketFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, you need to install a hostname verifier that accepts a bad host, as
that's likely wrong too, especially if you access the box by IP address when
the IP isn't in the cert.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.net.ssl.HostnameVerifier&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;HttpsURLConnection&lt;/span&gt; &lt;span class="n"&gt;sconnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpsURLConnection&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unwrap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;sconnection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHostnameVerifier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HostnameVerifier&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="nd"&gt;@Override&lt;/span&gt;
     &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SSLSession&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="o"&gt;}&lt;/span&gt;
 &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usable? Yes. But it's no wonder that Java programmers insist on IDEs when it's
so damn wordy. I mean, wouldn't a simple boolean have done here?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Wed, 05 Jun 2013 00:30:00 -0400</pubDate><guid>tag:www.but-i-digress.ca,2013-06-05:java-pointlessly-difficult.html</guid><category>Java</category></item><item><title>Matplotlib is really cool</title><link>http://www.but-i-digress.ca/matplotlib-is-really-cool.html</link><description>&lt;p&gt;Recently at work I needed to produce a pie chart for some data that I had to
crawl through using basic scripting. Pulling out the numbers, sorting,
filtering, etc., was all tasks that I'm used to doing, but for graphing I
normally use &lt;a class="reference external" href="http://www.gnuplot.org"&gt;Gnuplot&lt;/a&gt;. But, Gnuplot can't do pie charts AFAIK, so I needed
to look for another way.&lt;/p&gt;
&lt;p&gt;I didn't want to use a spreadsheet for the task because I don't find them very
scriptable. So, I turned to &lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib&lt;/a&gt;, Python's uber-graphing library.&lt;/p&gt;
&lt;p&gt;I found a simple example online, and before I knew it, I had a nice looking
pie chart, with very little code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make a square figure and axes&lt;/span&gt;
&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;fracs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fracs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fracs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autopct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%1.1f%%&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;By Country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;facecolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pad&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="http://www.but-i-digress.ca/static/images/piechart.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Very impressive. I tried it a few years ago and found it difficult, but it
seems to have gotten much simpler. I must delve deeper now.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Mon, 25 Mar 2013 15:30:00 -0400</pubDate><guid>tag:www.but-i-digress.ca,2013-03-25:matplotlib-is-really-cool.html</guid><category>Python</category></item><item><title>Joysticks on Mac OS X in Flightgear</title><link>http://www.but-i-digress.ca/joystick-mac-os-x-flightgear.html</link><description>&lt;p&gt;I like flight simulators. I've played all of the good ones, &lt;a class="reference external" href="http://www.flightgear.org/"&gt;Flightgear&lt;/a&gt; is
an open-source flight simulator that isn't bad, and is steadily getting better
with every release. While it is available to run on Mac, there's no way to
calibrate the Joystick due to a lack of caring on Apple's part.&lt;/p&gt;
&lt;p&gt;But, Flightgear is hackable. The joystick file is just a set of XML bindings,
those bindings can run code, so using coefficients to the input and
controlling the output, in theory I can calibrate the settings myself. So, I
did:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;

&amp;lt;PropertyList&amp;gt;
    &amp;lt;axis n=&amp;quot;0&amp;quot;&amp;gt;
        &amp;lt;desc&amp;gt;Aileron&amp;lt;/desc&amp;gt;
        &amp;lt;binding&amp;gt;
            &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
            &amp;lt;script&amp;gt;
                var value = cmdarg().getNode(&amp;quot;setting&amp;quot;).getValue();
                if (abs(value) &amp;amp;lt; 0.05) {
                    value = 0;
                }
                else {
                    value -= 0.15;
                    value *= 1.5;
                }
                setprop(&amp;quot;/controls/flight/aileron&amp;quot;, value);
            &amp;lt;/script&amp;gt;
        &amp;lt;/binding&amp;gt;
    &amp;lt;/axis&amp;gt;
    &amp;lt;axis n=&amp;quot;1&amp;quot;&amp;gt;
        &amp;lt;desc&amp;gt;Elevator&amp;lt;/desc&amp;gt;
        &amp;lt;binding&amp;gt;
            &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
            &amp;lt;script&amp;gt;
                var value = cmdarg().getNode(&amp;quot;setting&amp;quot;).getValue();
                if (abs(value) &amp;amp;lt; 0.05) {
                    value = 0;
                }
                else {
                    value -= 0.1;
                    value *= -1.5;
                }
                setprop(&amp;quot;/controls/flight/elevator&amp;quot;, value);
            &amp;lt;/script&amp;gt;
        &amp;lt;/binding&amp;gt;
    &amp;lt;/axis&amp;gt;
    &amp;lt;axis n=&amp;quot;2&amp;quot;&amp;gt;
        &amp;lt;desc&amp;gt;Rudder&amp;lt;/desc&amp;gt;
        &amp;lt;binding&amp;gt;
            &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
            &amp;lt;script&amp;gt;
                var value = cmdarg().getNode(&amp;quot;setting&amp;quot;).getValue();
                if (abs(value) &amp;amp;lt; 0.05) {
                    value = 0;
                }
                else {
                    value *= 1.5;
                }
                setprop(&amp;quot;/controls/flight/rudder&amp;quot;, value);
            &amp;lt;/script&amp;gt;
        &amp;lt;/binding&amp;gt;
    &amp;lt;/axis&amp;gt;
    &amp;lt;axis n=&amp;quot;3&amp;quot;&amp;gt;
        &amp;lt;desc&amp;gt;Throttle&amp;lt;/desc&amp;gt;
        &amp;lt;binding&amp;gt;
            &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
            &amp;lt;script&amp;gt;
                var value = cmdarg().getNode(&amp;quot;setting&amp;quot;).getValue();
                value -= 0.5;
                value *= -1.5;
                setprop(&amp;quot;/controls/engines/engine/throttle&amp;quot;, value);
            &amp;lt;/script&amp;gt;
        &amp;lt;/binding&amp;gt;
    &amp;lt;/axis&amp;gt;

&amp;lt;axis n=&amp;quot;4&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;View Direction&amp;lt;/desc&amp;gt;
    &amp;lt;direction&amp;gt;left&amp;lt;/direction&amp;gt;
    &amp;lt;low&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;view.panViewDir(1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/low&amp;gt;
    &amp;lt;high&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;view.panViewDir(-1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/high&amp;gt;
    &amp;lt;dead-band type=&amp;quot;double&amp;quot;&amp;gt;0&amp;lt;/dead-band&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;factor type=&amp;quot;double&amp;quot;&amp;gt;-1&amp;lt;/factor&amp;gt;
    &amp;lt;/binding&amp;gt;
&amp;lt;/axis&amp;gt;
&amp;lt;axis n=&amp;quot;5&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;View Elevation&amp;lt;/desc&amp;gt;
    &amp;lt;direction&amp;gt;upward&amp;lt;/direction&amp;gt;
    &amp;lt;low&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;view.panViewPitch(1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/low&amp;gt;
    &amp;lt;high&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;view.panViewPitch(-1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/high&amp;gt;
    &amp;lt;dead-band type=&amp;quot;double&amp;quot;&amp;gt;0&amp;lt;/dead-band&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;factor type=&amp;quot;double&amp;quot;&amp;gt;-1&amp;lt;/factor&amp;gt;
    &amp;lt;/binding&amp;gt;
&amp;lt;/axis&amp;gt;
&amp;lt;button&amp;gt;
    &amp;lt;desc&amp;gt;Brakes&amp;lt;/desc&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
    &amp;lt;script&amp;gt;controls.applyBrakes(1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;mod-up&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;controls.applyBrakes(0)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/mod-up&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;button n=&amp;quot;3&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;Flaps Up&amp;lt;/desc&amp;gt;
    &amp;lt;repeatable&amp;gt;false&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
    &amp;lt;script&amp;gt;controls.flapsDown(-1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;mod-up&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;controls.flapsDown(0)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/mod-up&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;button n=&amp;quot;4&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;Flaps Down&amp;lt;/desc&amp;gt;
    &amp;lt;repeatable&amp;gt;false&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
    &amp;lt;script&amp;gt;controls.flapsDown(1)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;mod-up&amp;gt;
    &amp;lt;binding&amp;gt;
        &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
        &amp;lt;script&amp;gt;controls.flapsDown(0)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
    &amp;lt;/mod-up&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;button n=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;Elevator Trim Forward&amp;lt;/desc&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
    &amp;lt;script&amp;gt;controls.elevatorTrim(0.75)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;button n=&amp;quot;2&amp;quot;&amp;gt;
    &amp;lt;desc&amp;gt;Elevator Trim Backward&amp;lt;/desc&amp;gt;
    &amp;lt;repeatable&amp;gt;true&amp;lt;/repeatable&amp;gt;
    &amp;lt;binding&amp;gt;
    &amp;lt;command&amp;gt;nasal&amp;lt;/command&amp;gt;
    &amp;lt;script&amp;gt;controls.elevatorTrim(-0.75)&amp;lt;/script&amp;gt;
    &amp;lt;/binding&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;name type=&amp;quot;string&amp;quot;&amp;gt;WingMan Extreme Digital 3D&amp;lt;/name&amp;gt;
&amp;lt;/PropertyList&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Right now, the calibration is good, but the controls are really jerky and
overly sensitive. I'll have to see if I can smooth them out. But, they work.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Mon, 11 Mar 2013 22:00:00 -0400</pubDate><guid>tag:www.but-i-digress.ca,2013-03-11:joystick-mac-os-x-flightgear.html</guid><category>OS X</category></item><item><title>Video on Raspbian</title><link>http://www.but-i-digress.ca/video-on-raspbian.html</link><description>&lt;p&gt;Currently our upstairs TV has a &lt;a class="reference external" href="http://www.raspberrypi.org/"&gt;raspberry pi&lt;/a&gt; attached to it. It's running
the basic &lt;a class="reference external" href="http://www.raspbian.org/"&gt;Raspbian&lt;/a&gt; distribution, based on &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian Linux&lt;/a&gt;. I'm using it for
development as well as for a media center at the moment, so I'm not using
&lt;a class="reference external" href="http://www.raspbmc.com/"&gt;RaspBMC&lt;/a&gt;, I'm going to order another one has a dedicated media center, but
for now I need to be able to play movies off of a usb stick.&lt;/p&gt;
&lt;p&gt;I tried &lt;a class="reference external" href="http://www.videolan.org/"&gt;VLC&lt;/a&gt;, but the performance was horrible. Apparently it doesn't use
the native GPU. I read about it online, and thanks to that finally found
&lt;a class="reference external" href="http://elinux.org/Omxplayer"&gt;omxplayer&lt;/a&gt;, which does use the native GPU. Unfortunately, it's not all that
polished when playing from the command-line. It leaves behind text in the
terminal above and below the video at certain aspect ratios, which is visually
distracting.&lt;/p&gt;
&lt;p&gt;They haven't fixed it yet so I put a wrapper script around it to work around
the issue. I plan to put a whole interface around it at some point just for
fun, but for now at least I can watch movies without text in the black bars
above and below:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh

setterm -cursor off
clear
omxplayer -o hdmi $1
clear
setterm -cursor on
&lt;/pre&gt;
&lt;p&gt;Simple, but it works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Mon, 11 Mar 2013 21:00:00 -0400</pubDate><guid>tag:www.but-i-digress.ca,2013-03-11:video-on-raspbian.html</guid><category>Linux</category><category>Raspberry Pi</category></item><item><title>Signatures in OAuth</title><link>http://www.but-i-digress.ca/signatures-in-oauth.html</link><description>&lt;p&gt;Hi again. I already went into the basics of OAuth in a &lt;a class="reference external" href="http://www.but-i-digress.ca/understanding-oauth.html"&gt;previous post&lt;/a&gt;, and
alluded to the signatures being the hard part of the implementation. I'm using
a &lt;a class="reference external" href="https://github.com/leah/python-oauth/"&gt;python-oauth&lt;/a&gt; module for the client, but for the server, I decided to
implement my own in &lt;a class="reference external" href="http://www.perl.org/"&gt;Perl&lt;/a&gt; and &lt;a class="reference external" href="http://mojolicio.us/"&gt;Mojolicious&lt;/a&gt;, since I had problems with
&lt;a class="reference external" href="http://search.cpan.org/dist/Net-OAuth/lib/Net/OAuth.pm"&gt;Net::OAuth&lt;/a&gt; that I deemed a protocol violation. Besides, I learn more this
way.&lt;/p&gt;
&lt;p&gt;There are multiple signature methods supported in OAuth 1.0, specifically
three.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;PLAINTEXT&lt;/li&gt;
&lt;li&gt;HMAC-SHA1&lt;/li&gt;
&lt;li&gt;RSA-SHA1&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unsurprisingly, &lt;tt class="docutils literal"&gt;PLAINTEXT&lt;/tt&gt; is the simplest. In this case, the signature is
a simple combination of the consumer secret and the token secret, if there is
any yet, with a slight twist. To ensure that the characters are treated
properly, they must first be &amp;quot;normalized&amp;quot;. This means decoding them as you
would any percent-encoded string, and then...&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;convert them to UTF-8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;escape them with percent-encoding from RFC 3986 like so&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;these characters are not encoded: alphanumerics, &amp;quot;-&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;_&amp;quot;, &amp;quot;~&amp;quot;&lt;/li&gt;
&lt;li&gt;all other characters &lt;em&gt;must&lt;/em&gt; be encoded&lt;/li&gt;
&lt;li&gt;any hexidecimal used in encoding must be upper-case&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I found that hard to read, but I did find this bit of Perl to solve the
problem in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Net::OAuth&lt;/span&gt;&lt;/tt&gt;, which I converted to a Mojolicious helper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$SKIP_UTF8_DOUBLE_ENCODE_CHECK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt; /[\x80-\xFF]/&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nn"&gt;utf8::&lt;/span&gt;&lt;span class="n"&gt;is_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;your OAuth message appears to contain some &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;multi-byte characters that need to be decoded &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;via Encode.pm or a PerlIO layer first. &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This may result in an incorrect signature.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nn"&gt;URI::Escape::&lt;/span&gt;&lt;span class="n"&gt;uri_escape_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;^\w.~-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decoding is even simpler.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uri_unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python, the same code looks like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Escape a URL including any /.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_utf8_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Convert unicode to utf-8.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;escaped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_utf8_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# Unquoting is just&lt;/span&gt;
&lt;span class="n"&gt;unquoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, this needs to be done to each of the parameters, in this case, the
consumer key and the token secret, if any, and then they are combined with an
ampersand. So, if your consumer key is, say, &amp;quot;myconsumerkey&amp;quot;, and you don't
have a token yet, then the initial &lt;tt class="docutils literal"&gt;PLAINTEXT&lt;/tt&gt; signature is
&lt;tt class="docutils literal"&gt;myconsumerkey&amp;amp;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, this isn't too bad, but once you get into &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;HMAC-SHA1&lt;/span&gt;&lt;/tt&gt; signatures, it
gets a lot worse. The signature from the &lt;tt class="docutils literal"&gt;PLAINTEXT&lt;/tt&gt; method becomes the key
for the signature, and you'll already have the code for that now, but the raw
input to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;HMAC-SHA1&lt;/span&gt;&lt;/tt&gt; algorithm is a base string, that is rather
difficult to construct. The input is the HTTP method, the request URI, both
normalized like above and contatenated with an ampersand. Then, this will be
contatenated with an ampersand to all of the input parameters in the request,
constructed in a particular way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Take all input parameter names and values from all sources, and normalize them like above. (but skip the oauth_signature parameter)&lt;/li&gt;
&lt;li&gt;Sort all parameters by the normalized parameter name.&lt;/li&gt;
&lt;li&gt;Pair the names and values, contatenated with an &amp;quot;=&amp;quot;.&lt;/li&gt;
&lt;li&gt;Concatenate all pairs with ampersands in the sorted order.&lt;/li&gt;
&lt;li&gt;Escape the entire string using the method above.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the base string to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;HMAC-SHA1&lt;/span&gt;&lt;/tt&gt; algorithm, along with the key we
mentioned. The final signature should match what the client generated. Oh, and
if you're running your service on a nonstandard port (80 or 443), then you
&lt;em&gt;must&lt;/em&gt; include the port in the URI.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;A call to &lt;a class="reference external" href="http://localhost/initiate"&gt;http://localhost/initiate&lt;/a&gt; on port 80 or 443, a GET request, with the
following params:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{'oauth_nonce': '21823552', 'oauth_timestamp': 1356129798,
 'oauth_consumer_key': 'Mitel test', 'oauth_signature_method': 'HMAC-SHA1',
 'oauth_version': '1.0', 'oauth_signature': 'pevzNqSnJ8QtqFUDWVlYhVRp8D0=',
 'oauth_callback': 'oob'}
&lt;/pre&gt;
&lt;p&gt;The base string would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GET&amp;amp;http%3A%2F%2Flocalhost%2Finitiate&amp;amp;oauth_callback%3Doob%26oauth_consumer_key%3DMitel%2520test%26oauth_nonce%3D21823552%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1356129798%26oauth_version%3D1.0
&lt;/pre&gt;
&lt;p&gt;with a key of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mitelsharedsecret&amp;amp;
&lt;/pre&gt;
&lt;p&gt;and a final signature of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pevzNqSnJ8QtqFUDWVlYhVRp8D0=
&lt;/pre&gt;
&lt;p&gt;Oddly, if I used the &lt;tt class="docutils literal"&gt;b64encode&lt;/tt&gt; method in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Digest::HMAC_SHA1&lt;/span&gt;&lt;/tt&gt;, a final
&amp;quot;=&amp;quot; sign is missing on the final result, so I had to pull in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;MIME::Base64&lt;/span&gt;&lt;/tt&gt;
and do this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encode_base64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hmac&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The equivalent Python in the &lt;tt class="docutils literal"&gt;oauth&lt;/tt&gt; library does this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;

&lt;span class="c"&gt;# HMAC object.&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt; &lt;span class="c"&gt;# 2.5&lt;/span&gt;
    &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sha&lt;/span&gt; &lt;span class="c"&gt;# Deprecated&lt;/span&gt;
    &lt;span class="n"&gt;hashed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Calculate the digest base 64.&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b2a_base64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;())[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That just leaves &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;RSA-SHA1&lt;/span&gt;&lt;/tt&gt;, but that requires a pre-existing SSL
relationship with the server, using SSL certificates. As such, I'm not worrying
about it just yet. I don't think it'll be used much.&lt;/p&gt;
&lt;p&gt;I'll need to do some interop testing with a few different clients, I'm hoping that
they're not all snowflakes. The point of the rigid nature of the base string
construction is that the final product is supposed to be reproducable.&lt;/p&gt;
&lt;p&gt;The base string construction is definitely the hardest part, and I've read
that the signatures were dropped in OAuth 2.0 because they were too hard to
do. I'd rather not drop the added security, and while they're a pain, there
are sample implementations to follow. I think that OAuth 1.0 is a better
choice. And it's, like, finished.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Fri, 21 Dec 2012 18:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-21:signatures-in-oauth.html</guid><category>OAuth</category><category>Web Services</category><category>Python</category><category>Perl</category></item><item><title>Understanding OAuth</title><link>http://www.but-i-digress.ca/understanding-oauth.html</link><description>&lt;p&gt;We meet again. Thanks for stopping by. This post has a high geek factor, so if
you're not one, feel free to move along, nothing to see here.&lt;/p&gt;
&lt;p&gt;Still here? K, your funeral. At work, I'm trying to add a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;ReST&lt;/a&gt; Web Service to
a product that could desperately use it. I want to do this to permit better
remote monitoring of said product and remote control for one of our management
services and future UIs that I may implement (think apps on Android and iOS).&lt;/p&gt;
&lt;p&gt;This is no small task, and it cannot be taken lightly. It will likely be used
by many, so it must be easy to debug and integrate with, hence ReST. I'll rant
about the evils of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt; later. It must be secure, which is easy, &lt;a class="reference external" href="http://www.apache.org/"&gt;Apache&lt;/a&gt; is
already on the system, with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer"&gt;SSL&lt;/a&gt; support. It must be authenticated. This is
tougher.&lt;/p&gt;
&lt;p&gt;Since I expect SSL, I could require client certificates, but they're a pain to
provision. You don't authenticate to amazon.com with client certificates for
this reason. Setting them up is about as much fun as visiting the passport
office, and it hurts the wallet too. Why should anyone pay for the privilege
of shopping in a store? Oh...I'll rant about &lt;a class="reference external" href="http://www.costco.com/"&gt;CostCo&lt;/a&gt; later.&lt;/p&gt;
&lt;p&gt;A popular method of authentication for web services is now &lt;a class="reference external" href="http://oauth.net/"&gt;OAuth&lt;/a&gt;. OAuth was
designed to fix a particular problem. Example: I like &lt;a class="reference external" href="http://twitter.com/"&gt;Twitter&lt;/a&gt;. I hate
Twitter's web interface. I prefer lightweight and simple. Plus, it's terrible
to use from a smartphone. Fortunately, Twitter has a ReST web service that
uses OAuth for authentication, so a vendor can release a Twitter app for my
phone that I can connect to my account. &amp;quot;But,&amp;quot; you ask, &amp;quot;surely you don't give
this app your Twitter password!&amp;quot; No. I don't. It's a closed-source app and for
all I know, they'd send it to themselves for nefarious purposes. I want the
app to access my Twitter account, but I do &lt;em&gt;not&lt;/em&gt; want them to have my
password. How do we do this? Enter OAuth.&lt;/p&gt;
&lt;p&gt;How does it work? The idea is simple. I'm going to go to my Twitter account,
and tell Twitter to issue a random &amp;quot;token&amp;quot; in my name. If you think you don't
know what a token is, think again. I suspect you carry keys, id badges,
smartcards, that kind of thing. There isn't any practical difference, beyond
keys being functional mechanically. This token I will then &lt;em&gt;securely&lt;/em&gt; provide
to the Twitter client on my phone, and when Twitter sees it, it will know that
the client is mine, and grant access. The token will be transmitted over SSL
to avoid spying and replay attacks, the hard part is securely getting the
token into the client, and keeping it convenient. We do &lt;em&gt;not&lt;/em&gt; want a repeat of
SSL client certificates. Provisioning needs to be simple.&lt;/p&gt;
&lt;p&gt;But, automating such things is problematic. Even if you implement a request
queue for token requests, you don't want it to fill up with spammed garbage
requests, and it will if we don't prevent it. Spammers should be pulled into
the street and shot, but I digress. A way to prevent this is to at least have
an existing relationship between the app vendor and the service. So, if I want
to distribute an app, I need to go into Twitter and tell them that I want to
be a &amp;quot;consumer&amp;quot; of their service. They'll ask me all kinds of details about
who I am, and then issue me a consumer ID, and a shared secret. The shared
secret is a random string that only they and I know. Now, when my app &lt;em&gt;asks&lt;/em&gt;
them for a token, it identifies itself with the consumer ID, and they validate
it, which includes checking a signature built from the shared secret, so they
know it's a valid request. BTW, this consumer ID can be used for billing
later, as not all web services are free. Here comes &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Software_as_a_service"&gt;SAAS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, it's not Twitter staff that need to approve this request, it's
the owner of the resource in question, the Twitter account holder. This is
good, as the account holder is the one who really cares here, and the Twitter
staff would otherwise be overloaded with handling requests like these. Now,
HTTP is a stateless protocol, so OAuth needs to add some state in the approval
process. So, initially when we request a token, OAuth responds with a
temporary one, so that the resource owner can be redirected to Twitter itself
to approve access to their account. Assuming that you approve, a new token
called a &lt;em&gt;verifier&lt;/em&gt; will be issued. This verifier can be provided in the
response, or simply displayed in the web page so that you can copy it into the
app in an &amp;quot;out-of-band&amp;quot; manner (ie. cut and paste).&lt;/p&gt;
&lt;p&gt;This verifier is then used to request the final set of tokens from the
service. It proves to the OAuth subsystem attached to the service that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The client was written by an approved vendor. &lt;em&gt;consumer id&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The owner of the account wishes to grant access to this client. &lt;em&gt;token and verifier&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The request was not forged by some random ass-hat on the net.  &lt;em&gt;signature including shared secrets&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once done, the app has a set of tokens that it can continually use to make
HTTP requests to Twitter's web service. The tokens issued can also be limited
in permissions, perhaps providing read access but not write access, and
perhaps to only specific areas of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt;. The tokens can also be revoked, if
you wish to pull said access in the future. This is a &amp;quot;good thing&amp;quot;. I use this
to fetch tweets, to make them, to manage follower lists, etc. All securely and
authenticated over HTTPS. And I do it from the command-line, with my own
client written in &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, which I dubbed &lt;a class="reference external" href="https://github.com/msoulier/twit"&gt;Twit&lt;/a&gt;. I pull my data from Google in
the same manner, for calendar events and contacts. Thus far it has worked
well.&lt;/p&gt;
&lt;p&gt;Now, for what I want to do, I'm implementing OAuth 1.0, even though the 2.0
&amp;quot;standard&amp;quot; is kinda coming. I phrase it this way because it's been coming for
a while now, and as communities often do, it's already forked, dropped some
security in the form of strong signatures, in the name of developer
convenience. So, I'm sticking with 1.0. It's harder to implement, but it's
&lt;em&gt;done&lt;/em&gt;, and it's more secure. I've only just gotten PLAINTEXT and HMAC-SHA1
signatures working, I'll post on that soon. I'm doing the server in &lt;a class="reference external" href="http://www.perl.org/"&gt;Perl&lt;/a&gt; and
&lt;a class="reference external" href="http://mojolicio.us/"&gt;Mojolicious&lt;/a&gt; for legacy reasons, and implementing it myself because I've had
issues with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Net::OAuth&lt;/span&gt;&lt;/tt&gt; module for Perl. Maybe I'm using it wrong, but
thus far I've gotten no response from the author. Plus, I learn much, much
more this way.&lt;/p&gt;
&lt;p&gt;This post is running a tad long, so I'll end it here, with more to come on my
trip into OAuth. Specifically implementing support for the signatures. Funny
thing is that the signing part is simple, but constructing the base string is
freakin' hard. You'll get what I mean if you read the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc5849"&gt;RFC&lt;/a&gt;, or just stay
tuned.&lt;/p&gt;
&lt;p&gt;See? Geeky. I warned you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Thu, 20 Dec 2012 10:30:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-20:understanding-oauth.html</guid><category>OAuth</category><category>Web Services</category></item><item><title>Brewing a better UNIX</title><link>http://www.but-i-digress.ca/brewing-a-better-unix.html</link><description>&lt;p&gt;Being a &lt;a class="reference external" href="http://www.linux.org/"&gt;Linux&lt;/a&gt; user, I'm used to a fairly standard set of tools on my
command-line. On &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt;, it's essentially BSD UNIX underneath, which I have had
some experience with thanks to &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;. The environment is very similar, but
not identical, and on &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;, you quickly find yourself using the ports
system to install new packages that have been ported to &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt; from places
like &lt;a class="reference external" href="http://www.linux.org/"&gt;Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It took about five minutes of &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt; use for me to go install &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;wget&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;imagemagick&lt;/tt&gt;, and a host of other packages. There's a
lot already installed with &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt;, but a few key things or me were definitely
missing. I pulled &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; from &lt;a class="reference external" href="http://code.google.com/p/macvim/"&gt;MacVim&lt;/a&gt;, but then I had to look for somewhere to
get everything else I needed.&lt;/p&gt;
&lt;p&gt;Being UNIX, I had several choices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Grab the source and build it myself.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://www.macports.org/"&gt;MacPorts&lt;/a&gt; and build it from there.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; and build it from there.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I've done source installs, I've done ports out of FreeBSD, so I figured
I'd see how &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; works. Basically, it makes &lt;tt class="docutils literal"&gt;/usr/local&lt;/tt&gt; owned by the
user that installs it, which on &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt; is me, as an administrative user (like a
Windows power user). From there you can double-check that everything is set up
properly by running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew doctor
&lt;/pre&gt;
&lt;p&gt;It will pick up permission problems, issues with your &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; environment
variable, warn you about packages that were built but not symlinked into
&lt;tt class="docutils literal"&gt;/usr/local&lt;/tt&gt; properly, etc. Then it's not much different than using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; on Debian, except that the packages are building when they
install, they're not pre-built binaries. So wget was just:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew update
brew install wget
&lt;/pre&gt;
&lt;p&gt;Since then I've installed some essentials, and non-essentials if I include
&lt;tt class="docutils literal"&gt;freeciv&lt;/tt&gt;. Lets see, I have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
msoulier&amp;#64;merlin:~$ brew list
c-ares      git         lame        lua     sdl_mixer
cracklib    glib        libevent    lynx    tmux
feh         gmp         libffi      mutt    tokyo-cabinet
flac        gnupg       libgcrypt   nettle  unrar
fontconfig  gnuplot     libgpg-error p11-kit wget
freeciv     gnutls      libmikmod   pcre    xz
freetype    imagemagick libogg      pkg-config
gd          imlib2      libpng      readline
gettext     irssi       libtasn1    sdl
giblib      jpeg        libvorbis   sdl_image
&lt;/pre&gt;
&lt;p&gt;Rather nicely, the packages are all installed under &lt;tt class="docutils literal"&gt;/usr/local/Cellar/&lt;/tt&gt;,
and symlinked into the right places so they show up in my path, and for
building. As I really hate installing from source, because you never know what
you have installed or how to uninstall it, or what you'll break if you upgrade
it, I like this.&lt;/p&gt;
&lt;p&gt;I do find that other packages mess with those careful permissions, so I keep
running &lt;tt class="docutils literal"&gt;brew doctor&lt;/tt&gt; so I know about the issues. I also noticed, thanks to
a coworker, that the Perl community has done something similar for install
Perl modules called Perlbrew. I'm going to look into that soon, as honestly,
it's about damn time. Managing personal Perl modules sucks, has always sucked,
and now thanks to Perlbrew will hopefully suck no longer. But I digress, more
on that in another post.&lt;/p&gt;
&lt;p&gt;I give &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; an &lt;em&gt;A&lt;/em&gt;. An &lt;em&gt;A+&lt;/em&gt; would be a command to fix permissions problems
without my help, and maybe there is one, these things elude me at times. I
highly recommend it if you're trying to complete your *nix environment on OS
X.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 09 Dec 2012 08:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-09:brewing-a-better-unix.html</guid><category>OS X</category><category>UNIX</category><category>FOSS</category></item><item><title>The Apple Support Experience</title><link>http://www.but-i-digress.ca/apple-support-experience.html</link><description>&lt;p&gt;So, having jumped into Apple land with a Mac Mini recently, and having some
problems, I of course took advantage of my included 90 days technical support.
Being part of the Apple ecosystem includes being subject to how they support
their customers, so I think it's important to write about.&lt;/p&gt;
&lt;p&gt;Normally my idea of support is to figure out what piece of software I'm having
a problem with, locating the open-source community responsible for it, and
then tracking down a mailing list, IRC channel, whatever, where I can ask for
help. I usually loathe help lines of any kind, as North America and most of
the world handles these very poorly these days.&lt;/p&gt;
&lt;p&gt;You know the story. You call hoping that you'll talk to a flesh and blood
human, and you get a machine telling you that, &amp;quot;we are currently experiencing
a higher than normal call volume,&amp;quot; which is what you'll hear every damn time
you call so obviously it's not higher than normal, and they're just cheap
bastards who understaff their support infrastructure, but I digress.&lt;/p&gt;
&lt;p&gt;Well, I collected a few questions together before calling Apple Canada, as I
hate calling help lines so I figured once I found a human I'd hammer him/her
with several questions. Better throughput. Can't help it, I think like a
programmer. And, of course, I got a machine. I asked me what product I was
calling about, using voice recognition to understand me as I said, &amp;quot;Mac Mini&amp;quot;,
and asked me for the serial number. That all worked, and I finally got a
human, with little difficulty. No Indian accent either, I think it was
Spanish, but I've called a few times since and there's no discernable pattern,
so perhaps it's not overseas for a change. Not that I care all that much, as
long as they actually help, but I've had some really bad experiences before
with uninformed first-line support reading from their scripts.&lt;/p&gt;
&lt;p&gt;Well, the guy I talked to couldn't help with the software bugs, obviously he
doesn't own the code, but he can report the issues and I can hope that a
developer at Apple will fix them. I already reported the issues at
&lt;a class="reference external" href="http://www.apple.com/feedback/"&gt;http://www.apple.com/feedback/&lt;/a&gt; anyway, and hopefully that's not a digital
black hole like most feedback pages. He did help me understand how to do a
couple of things that OS X considers advanced, like launching a terminal from
a keystroke. BTW Apple, that's pretty basic in any Linux window manager, so
please do better.&lt;/p&gt;
&lt;p&gt;Then we got down to the hardware issue I'm having. At least, I think it's
hardware. &lt;a class="reference external" href="https://discussions.apple.com/thread/4490924"&gt;Many other people&lt;/a&gt; are having the same problem. It makes me wonder
if there was a bad batch of Mac Minis out of Apple recently. I called in about
it, mentioned to the nice lady that wanted to sell me an Applecare package
that I likely wouldn't need it, as I was thinking of taking the unit back, and
suddenly I was talking to a nice man in second level support.&lt;/p&gt;
&lt;p&gt;He took the issue on personally, gave me a direct contact number to him, and
the email address, and we started swapping hardware to narrow down the
potential problems. I swapped the LCD with one upstairs, no help. Got a new
HDMI to DVI adaptor from Apple, no help. He arranged for a full unit exchange
and data migration, which was done very professionally (albiet with some data
loss that was easily made up for), unfortunately it didn't help.&lt;/p&gt;
&lt;p&gt;Finally, we're running an app from Apple to gather up logs, and I'm told that
the Engineers at Apple know what the problem is, they think it's software, and
to keep my eyes on the software updates. There was one recently in fact,
labelled graphics performance and reliability, so I wonder if that was it. I'm
waiting to see if the issue happens again.&lt;/p&gt;
&lt;p&gt;Thus far, I must say that Apple raises the bar for what good customer support
should be. I've had plenty of bad experiences with other companies, and so far
I've had mostly good ones with Apple, and now an exceptional one. The guy I'm
talking to deserves a raise. Fingers crossed that the experience continues to
be this good.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Thu, 06 Dec 2012 12:20:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-06:apple-support-experience.html</guid><category>Apple</category><category>Customer Service</category></item><item><title>Customizing Awesome</title><link>http://www.but-i-digress.ca/customizing-awesome.html</link><description>&lt;p&gt;As I mentioned previously, I'm currently running &lt;a class="reference external" href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt; on my netbook. While
I added suspend on lid close, I still need to customize the crap out of it. I
had nothing showing me my current battery status, so I searched around to find
the appropriate &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt; code, a language that I'm still picking up.&lt;/p&gt;
&lt;p&gt;So, I hacked my &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/awesome/rc.lua&lt;/span&gt;&lt;/tt&gt; and added this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- {{{ Battery state&lt;/span&gt;

&lt;span class="c1"&gt;-- Initialize widget&lt;/span&gt;
&lt;span class="n"&gt;batwidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;textbox&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;baticon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;imagebox&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;-- Register widget&lt;/span&gt;
&lt;span class="n"&gt;vicious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batwidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vicious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;baticon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beautiful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget_bat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;span color=&amp;#39;white&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;BAT0&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then added the widget to the top of my screen. I was warned on the awesome
mailing list (the name does confuse the english language) that I had to be
careful where to put it, since the tasklist is greedy and will take all
available space.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mywibox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mylauncher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mytaglist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;mypromptbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;awful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftright&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;mylayoutbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;mytextclock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;mysystray&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;baticon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batwidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baticon&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mytasklist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;awful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightleft&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, it works. Now I need a system load, cpu load, etc. And I should hack the
keybindings, although I'm getting used to the default ones. Maybe update the
default layout since I prefer maximized layout.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Wed, 28 Nov 2012 07:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-28:customizing-awesome.html</guid><category>Linux</category><category>FOSS</category><category>Awesome WM</category></item><item><title>Tweeting on OS X</title><link>http://www.but-i-digress.ca/tweeting-on-osx.html</link><description>&lt;p&gt;For some time my desktop has been an older, underpowered Linux box, so using
services like &lt;a class="reference external" href="http://www.twitter.com"&gt;Twitter&lt;/a&gt; via the website has been painful, as loaded with heavy
javascript that would consume my CPU's limited resources.&lt;/p&gt;
&lt;p&gt;So, like any &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; programmer would do, I wrote my own client. Well, lets be
honest, the hard work was done by the &lt;a class="reference external" href="https://github.com/tweepy/tweepy"&gt;tweepy&lt;/a&gt; library, I'm just using it. I
call it &lt;a class="reference external" href="https://github.com/msoulier/twit"&gt;Twit&lt;/a&gt;, and I've been using it to post for some time now, lightweight
from the command-line. I also keep one running, polling my account for new
posts, and notifying me when there are new posts and pulling them down.&lt;/p&gt;
&lt;p&gt;My notifications come in many forms, depending on the command-line options. I
can just watch them show up in text in the shell, I can use &lt;a class="reference external" href="http://freecode.com/projects/xosd"&gt;xosd&lt;/a&gt; to display
notifications on your X11 desktop, It can use &lt;a class="reference external" href="http://developer-next.gnome.org/libnotify/"&gt;libnotify&lt;/a&gt; in Gnome to display
temporary notifications that drop down in the corner of the screen.&lt;/p&gt;
&lt;p&gt;As I'm now playing with an OS X desktop, libnotify isn't supported. I could
use xosd along with &lt;a class="reference external" href="http://xquartz.macosforge.org/trac/wiki"&gt;XQuartz&lt;/a&gt;, but I'd prefer more native integration with OS
X, as it does have a notification system, via &lt;a class="reference external" href="https://developer.apple.com/library/mac/#releasenotes/Cocoa/AppKit.html"&gt;AppKit&lt;/a&gt;. Python is preinstalled
on OS X, and the AppKit module is included. I found a &lt;a class="reference external" href="https://github.com/albertz/music-player/blob/master/notifications.py"&gt;great example&lt;/a&gt; of how
to use it online, which made this much, much simpler, so thanks there.&lt;/p&gt;
&lt;p&gt;I used it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_appkit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Thanks to&lt;/span&gt;
&lt;span class="sd"&gt;    https://github.com/albertz/music-player/blob/master/notifications.py&lt;/span&gt;
&lt;span class="sd"&gt;    for how to do this.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;notifCenter&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;AppKit&lt;/span&gt;
        &lt;span class="n"&gt;notifCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
            &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSUserNotificationCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultUserNotificationCenter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;appDelegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setDelegate_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appDelegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;notif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSUserNotification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tweet by &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTitle_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setInformativeText_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliverNotification_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this does cause a little icon on the dock to jump up and down, so I'll
need to look into that, and how to open the browser to twitter or the embedded
link when the notification is clicked on, but it's a good start.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 25 Nov 2012 09:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-25:tweeting-on-osx.html</guid><category>OS X</category><category>Python</category><category>FOSS</category></item><item><title>Suspend on lid close in Debian Squeeze</title><link>http://www.but-i-digress.ca/suspend-on-lid-close-debian-squeeze.html</link><description>&lt;p&gt;I recently decided that &lt;a class="reference external" href="http://www.gnome.org"&gt;Gnome&lt;/a&gt; is not the best desktop for my little &lt;a class="reference external" href="http://www.asus.com/Eee/"&gt;EeePC&lt;/a&gt;
netbook with a little 10.5&amp;quot; screen. So I'm playing around with a window
manager that mainly just maximizes everything. I've tried &lt;a class="reference external" href="http://www.nongnu.org/ratpoison/"&gt;Ratpoison&lt;/a&gt;, I've
tried &lt;a class="reference external" href="https://code.google.com/p/wmii/"&gt;wmii&lt;/a&gt;, and now I'm trying &lt;a class="reference external" href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have a lot of customizations to do, but one thing that was missing was a way
to suspend the netbook when the laptop lid is closed. I could manually run
&lt;tt class="docutils literal"&gt;acpitool &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/tt&gt; in a shell, or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pm-suspend&lt;/span&gt;&lt;/tt&gt;, but it's best handled by DBus, as
intended.&lt;/p&gt;
&lt;p&gt;Now, a simple way to have DBus do the work is using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dbus-send&lt;/span&gt;&lt;/tt&gt;, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dbus-send --print-reply \
          --system \
          --dest=org.freedesktop.UPower \
          /org/freedesktop/UPower \
          org.freedesktop.UPower.Suspend
&lt;/pre&gt;
&lt;p&gt;The hard part is subscribing to the lid close event, so I'm not polling all
the time, exactly what DBus was written to prevent. I had a Python script for
this, but the API was changed in Squeeze to use the &lt;a class="reference external" href="http://upower.freedesktop.org/"&gt;UPower&lt;/a&gt; daemon and API.&lt;/p&gt;
&lt;p&gt;I had to do some poking around to figure out how to update it, but I just got
it working, so I thought I'd share.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dbus.mainloop.glib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DBusGMainLoop&lt;/span&gt;

&lt;span class="n"&gt;pow_prop_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;pow_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_lidclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;#39;LidIsClosed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lid is closed, suspending&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;pow_iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Suspend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lid is open&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pow_iface&lt;/span&gt;

    &lt;span class="n"&gt;DBusGMainLoop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_as_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemBus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;power_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;org.freedesktop.UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;#39;/org/freedesktop/UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power_proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s"&gt;&amp;#39;org.freedesktop.DBus.Properties&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pow_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power_proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s"&gt;&amp;#39;org.freedesktop.UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Registering a signal receiver for upower events...&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_signal_receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle_lidclose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;dbus_interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.freedesktop.UPower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;signal_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I just run it in the background from my &lt;cite&gt;.xsession&lt;/cite&gt; script at X11 login,
and it's sitting there waiting for any change in UPower status. Works like a
charm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Tue, 20 Nov 2012 22:10:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-20:suspend-on-lid-close-debian-squeeze.html</guid><category>Linux</category><category>FOSS</category><category>Python</category></item><item><title>Joysticks? We don't need no stinking joysticks...</title><link>http://www.but-i-digress.ca/apple-and-joysticks.html</link><description>&lt;p&gt;So, after unpackaging my brand-spanking new Mac Mini, I grabbed a copy of the
&lt;a class="reference external" href="http://www.x-plane.com"&gt;X-Plane&lt;/a&gt; demo, dropped in an old usb joystick and fired it up. Oddly, X-Plane
itself asked me if I wanted to calibrate the joystick, which struck me as odd,
that hasn't happened in years, not since my days with plain old DOS. DOS
didn't have a controller subsystem so there was no way to calibrate a joystick
once, for all apps, but Microsoft fixed that long, long ago. Even Linux has
&lt;a class="reference external" href="gentle-taiga-2880"&gt;jscal&lt;/a&gt; to allow the same thing. It's command-line, but it works.&lt;/p&gt;
&lt;p&gt;So of course I assumed that on a Mac, with it's reputation for dead simple
plug and play, everything just works, dead simple and easy, it would have the
same right? Umm, no. No command-line tool, no graphical tool, no voice
activated tool, no swiping on my LCD, nothing. It's left up to the
application, kinda like DOS. Way to go Apple.&lt;/p&gt;
&lt;p&gt;Now, why do I care, since X-Plane has such a utility? Well, in X-Plane, I
don't. But after downloading and installing Flightgear, I do. They leave the
joystick calibration up to the OS, and rightly so. So, I can't use the
joystick in Flightgear, not that I'd want to use it on this machine anyway, as
I've already found out that the OpenGL rendering performance on the Mac Mini
is horrid. Wow, another strike over my cheap Linux box sitting next to me that
was made out of spare parts from a friend's basement. That is truly, utterly,
sad.&lt;/p&gt;
&lt;p&gt;Seriously Apple, is that the best you can do? If you think I'm interested in
tilting an ipad to fly a plane in any realistic simulation, you guys have been
smoking way too much of what you usually smoke. I want realism, and last time
I flew, the pilot didn't have to lean to bank the plane. At least, I hope not,
the door was closed and locked, post-9/11 and all, but I digress.&lt;/p&gt;
&lt;p&gt;Bottom line Apple, for what I paid for this thing, you could have done much,
much better in this regard. X-Plane rocks, but Intel graphics in the mini?
Pleease, put a smoking Nvidia chipset in there and give me a decent framerate
for games!&lt;/p&gt;
&lt;p&gt;Are you listening?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Mon, 19 Nov 2012 13:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-19:apple-and-joysticks.html</guid><category>OS X</category></item><item><title>Umm, done unzipping yet?</title><link>http://www.but-i-digress.ca/umm-done-unzipping-yet.html</link><description>&lt;p&gt;So, the first thing I did after after wrapping my head around the cocoa
interface was to start installing software like a madman. I wanted Firefox,
VLC, Kobo, Gimp, Vim, etc, etc, etc. So, I had to learn how to install apps on
OS X.&lt;/p&gt;
&lt;p&gt;Apps in OS X seem to come in at least two different forms: .app files, which
are self-contained application packages that you simply drop into
&lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; on the system (totally awesome), and .pkg files, which are
more windows-like installers.&lt;/p&gt;
&lt;p&gt;The latter seems to be required with more complex installs, like plug-ins that
need to put files in privileged places all over the system, requiring root
access to install. As an admin user, I can already put .app files into
&lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; without root access, the implications of which are that a
virus could infect the apps in &lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; too, so that's a strike,
security-wise, for OS X over Linux. Still better than Windows though, where a
Power User can change anything under &lt;tt class="docutils literal"&gt;Program Files&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;Windows&lt;/tt&gt; without
escalating privileges.&lt;/p&gt;
&lt;p&gt;The .app files or .pkg files can come in many forms, the most common of which
is a .dmg file, which is a disk image that OS X will casually mount on a
loopback. I've noticed that the &lt;tt class="docutils literal"&gt;Finder&lt;/tt&gt; can mount .dmg and .iso files with
a simple click. With an .app file, you just drag it to &lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt;, and
you're done, and uninstalling is just a simple. Far superior to &lt;em&gt;any&lt;/em&gt; OS that
I've used in the past. It's also common to download .zip files, which clicking
on in the &lt;tt class="docutils literal"&gt;Finder&lt;/tt&gt; fires-up the &lt;tt class="docutils literal"&gt;Archive Utility&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So there I was, clicking along and installing, and then a progress bar
indicating that the .zip file was opening just kept going, and going, and
going. I looked online, and found that &lt;a class="reference external" href="http://apple.stackexchange.com/questions/70160/can-i-fix-things-so-archive-utility-doesnt-hang-on-all-zip-files"&gt;I am not alone&lt;/a&gt; in having this
problem. Apparently, the &lt;tt class="docutils literal"&gt;appleeventsd&lt;/tt&gt; daemon requires killing under those
circumstances, something that the nice guy at Apple support did not know.
Looks like the issue is in OS X 10.8.2, which I am running.&lt;/p&gt;
&lt;p&gt;Hmm. Bad timing in jumping on the Apple bandwagon? I wonder how long they'll
take to fix the issue. Good test for what it will be like to live as part of
Apple's ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sat, 17 Nov 2012 14:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-17:umm-done-unzipping-yet.html</guid><category>OS X</category></item><item><title>Ok, nobody panic, there's a fruit on my screen</title><link>http://www.but-i-digress.ca/fruit-on-my-screen.html</link><description>&lt;p&gt;I've needed a new desktop for a while now. As I'm primarily a Unix user, I
typically buy a cheap PC and put &lt;a class="reference external" href="http://www.linux.org"&gt;Linux&lt;/a&gt; on it. This involves doing a bunch of
research into available hardware to make sure that everything is going to
work, like accelerated graphics for any games I'd like to play, supported
network drivers, etc. Over the years it's gotten easier and easier to get
Linux working on a box, but sometimes I still have to work to get something
working.&lt;/p&gt;
&lt;p&gt;The end result is a working Linux workstation that I can use for work, and my
basic computing needs, often involving fighting with the fact that noone wants
to support it or any software that I'm using. That part does get old year
after year.&lt;/p&gt;
&lt;p&gt;For example, I bought a &lt;a class="reference external" href="http://www.kobobooks.com"&gt;Kobo&lt;/a&gt; ages ago, and I had to use a Windows box to run
the Kobo desktop software, to patch its firmware and put books on it. Later I
found out that I could just copy .epub books into it like a flash drive, which
is awesome by the way Kobo, but you get the idea. For my iPod shuffle, I copy
mp3s onto it and run the rebuild_db Python script to update the db on the
iPod. There are workarounds for these issues, but sometimes it's nice to just
plug something in and have it work. And fighting with my devices isn't as much
fun as it used to be. I'm too damn busy.&lt;/p&gt;
&lt;p&gt;So, based the recommendations of various friends and colleagues, I decided to
take the plunge with my new desktop, and try a &lt;a class="reference external" href="http://www.apple.com/mac-mini/"&gt;Mac Mini&lt;/a&gt; from &lt;a class="reference external" href="http://www.apple.com"&gt;Apple&lt;/a&gt;, running
&lt;a class="reference external" href="http://www.apple.com/osx/"&gt;Mac OS X&lt;/a&gt; 10.8, &amp;quot;Mountain Lion&amp;quot;. I figured that it's a lot better supported
in commercial software land, while being &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Darwin_%28operating_system%29"&gt;BSD Unix&lt;/a&gt; underneath, so maybe it's
the best of both worlds.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="http://www.but-i-digress.ca/static/images/apple-logo1.jpg" style="width: 289px; height: 350px;" /&gt;
&lt;/div&gt;
&lt;p&gt;I need to customize the crap out of it, and get used to the interface and
keybindings, and do a lot of reading. I hope to post my experiences here, so
stay tuned if you're interested.&lt;/p&gt;
&lt;p&gt;Sure, I could have just thrown Linux on another box, and maybe I still will,
but I've &lt;em&gt;done&lt;/em&gt; that. I felt like doing something new.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Fri, 16 Nov 2012 18:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-16:fruit-on-my-screen.html</guid><category>OS X</category></item></channel></rss>