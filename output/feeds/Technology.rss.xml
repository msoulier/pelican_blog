<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>But I Digress</title><link>http://www.but-i-digress.ca/</link><description></description><atom:link href="http://feeds.feedburner.com/feeds/Technology.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 16 Dec 2012 08:30:00 -0500</lastBuildDate><item><title>Getting started with autotools</title><link>http://www.but-i-digress.ca/getting-started-with-autotools.html</link><description>&lt;p&gt;So, I'm still reading O'Rielly's &lt;a class="reference external" href="http://www.but-i-digress.ca/21st-century-c.html"&gt;21st Century C&lt;/a&gt;. I know, too many books on
the go and I read slowly, and not often enough. I'm going through the section
on &lt;a class="reference external" href="http://www.gnu.org/software/autoconf/"&gt;GNU autotools&lt;/a&gt;, which I've never been a heavy user of, albiet I'm a heavy
consumer of. I just don't spend much time distributing C/C++ across platforms.&lt;/p&gt;
&lt;p&gt;I have a little C tool that I figured I'd try it on, a small replacement for
GNU tree that I wrote a while back, and since &lt;tt class="docutils literal"&gt;tree&lt;/tt&gt; isn't available on
OS X, it seemed a good excuse to port it. Previously I just had a Makefile
that I maintained, and it works fine, but it's a good excuse to learn how to
use autotools for the future. I do have some libraries, and they're harder to
port, which is where &lt;a class="reference external" href="http://www.gnu.org/software/libtool/"&gt;libtool&lt;/a&gt; comes in.&lt;/p&gt;
&lt;p&gt;This &lt;tt class="docutils literal"&gt;build&lt;/tt&gt; script outlines the process of using autotools for the first
time. This script borrows very heavily from the book's author.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating Makefile.am&amp;quot;&lt;/span&gt;
cat &amp;gt; Makefile.am &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;bin_PROGRAMS=twig&lt;/span&gt;
&lt;span class="s"&gt;twig_SOURCES=twig.c&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running autoscan...&amp;quot;&lt;/span&gt;
autoscan

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating configure.ac...&amp;quot;&lt;/span&gt;
sed -e &lt;span class="s1"&gt;&amp;#39;s/FULL-PACKAGE-NAME/twig/&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s1"&gt;&amp;#39;s/VERSION/1.0/&amp;#39;&lt;/span&gt;   &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s1"&gt;&amp;#39;s|BUG-REPORT-ADDRESS|msoulier@digitaltorque.ca|&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s1"&gt;&amp;#39;10i\&lt;/span&gt;
&lt;span class="s1"&gt;    AM_INIT_AUTOMAKE&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &amp;lt; configure.scan &amp;gt; configure.ac

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating additional files...&amp;quot;&lt;/span&gt;
touch NEWS README AUTHORS ChangeLog

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running autoreconf...&amp;quot;&lt;/span&gt;
autoreconf -iv

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running configure...&amp;quot;&lt;/span&gt;
./configure

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running make distcheck to package sources...&amp;quot;&lt;/span&gt;
make distcheck
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, it's not ready to ship, as the &lt;tt class="docutils literal"&gt;NEWS&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;README&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;AUTHORS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ChangeLog&lt;/tt&gt; aren't populated yet. But it's close. The
&lt;tt class="docutils literal"&gt;configure&lt;/tt&gt; script works, and I could then build it on OS X using the
expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My next project to package is a shared library for work, so that will be more
interesting. Still, if you're looking to use autotools for the first time for
something simple, this should take the mystery out of kick-starting it. Sure,
there's some magic like the &lt;tt class="docutils literal"&gt;AM_INIT_AUTOMAKE&lt;/tt&gt; macro, and I've a ton to
learn yet, but this worked on the first try, and the resulting tarball is good
to push to &lt;a class="reference external" href="http://sourceforge.net/"&gt;SourceForge&lt;/a&gt; or elsewhere if you want to.&lt;/p&gt;
&lt;p&gt;As I pick up more, I'll try to share it. I don't find autotools intuitive at
all, but with some simple recipes I think I'll survive.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 16 Dec 2012 08:30:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-16:getting-started-with-autotools.html</guid><category>C/C++</category><category>FOSS</category><category>Autotools</category></item><item><title>Brewing a better UNIX</title><link>http://www.but-i-digress.ca/brewing-a-better-unix.html</link><description>&lt;p&gt;Being a &lt;a class="reference external" href="http://www.linux.org/"&gt;Linux&lt;/a&gt; user, I'm used to a fairly standard set of tools on my
command-line. On &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt;, it's essentially BSD UNIX underneath, which I have had
some experience with thanks to &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;. The environment is very similar, but
not identical, and on &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;, you quickly find yourself using the ports
system to install new packages that have been ported to &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt; from places
like &lt;a class="reference external" href="http://www.linux.org/"&gt;Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It took about five minutes of &lt;a class="reference external" href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt; use for me to go install &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;wget&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;imagemagick&lt;/tt&gt;, and a host of other packages. There's a
lot already installed with &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt;, but a few key things or me were definitely
missing. I pulled &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; from &lt;a class="reference external" href="http://code.google.com/p/macvim/"&gt;MacVim&lt;/a&gt;, but then I had to look for somewhere to
get everything else I needed.&lt;/p&gt;
&lt;p&gt;Being UNIX, I had several choices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Grab the source and build it myself.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://www.macports.org/"&gt;MacPorts&lt;/a&gt; and build it from there.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; and build it from there.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I've done source installs, I've done ports out of FreeBSD, so I figured
I'd see how &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; works. Basically, it makes &lt;tt class="docutils literal"&gt;/usr/local&lt;/tt&gt; owned by the
user that installs it, which on &lt;a class="reference external" href="http://www.apple.com/osx/"&gt;OS X&lt;/a&gt; is me, as an administrative user (like a
Windows power user). From there you can double-check that everything is set up
properly by running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew doctor
&lt;/pre&gt;
&lt;p&gt;It will pick up permission problems, issues with your &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; environment
variable, warn you about packages that were built but not symlinked into
&lt;tt class="docutils literal"&gt;/usr/local&lt;/tt&gt; properly, etc. Then it's not much different than using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; on Debian, except that the packages are building when they
install, they're not pre-built binaries. So wget was just:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew update
brew install wget
&lt;/pre&gt;
&lt;p&gt;Since then I've installed some essentials, and non-essentials if I include
&lt;tt class="docutils literal"&gt;freeciv&lt;/tt&gt;. Lets see, I have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
msoulier&amp;#64;merlin:~$ brew list
c-ares      git         lame        lua     sdl_mixer
cracklib    glib        libevent    lynx    tmux
feh         gmp         libffi      mutt    tokyo-cabinet
flac        gnupg       libgcrypt   nettle  unrar
fontconfig  gnuplot     libgpg-error p11-kit wget
freeciv     gnutls      libmikmod   pcre    xz
freetype    imagemagick libogg      pkg-config
gd          imlib2      libpng      readline
gettext     irssi       libtasn1    sdl
giblib      jpeg        libvorbis   sdl_image
&lt;/pre&gt;
&lt;p&gt;Rather nicely, the packages are all installed under &lt;tt class="docutils literal"&gt;/usr/local/Cellar/&lt;/tt&gt;,
and symlinked into the right places so they show up in my path, and for
building. As I really hate installing from source, because you never know what
you have installed or how to uninstall it, or what you'll break if you upgrade
it, I like this.&lt;/p&gt;
&lt;p&gt;I do find that other packages mess with those careful permissions, so I keep
running &lt;tt class="docutils literal"&gt;brew doctor&lt;/tt&gt; so I know about the issues. I also noticed, thanks to
a coworker, that the Perl community has done something similar for install
Perl modules called Perlbrew. I'm going to look into that soon, as honestly,
it's about damn time. Managing personal Perl modules sucks, has always sucked,
and now thanks to Perlbrew will hopefully suck no longer. But I digress, more
on that in another post.&lt;/p&gt;
&lt;p&gt;I give &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; an &lt;em&gt;A&lt;/em&gt;. An &lt;em&gt;A+&lt;/em&gt; would be a command to fix permissions problems
without my help, and maybe there is one, these things elude me at times. I
highly recommend it if you're trying to complete your *nix environment on OS
X.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 09 Dec 2012 08:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-09:brewing-a-better-unix.html</guid><category>OS X</category><category>UNIX</category><category>FOSS</category></item><item><title>The Apple Support Experience</title><link>http://www.but-i-digress.ca/apple-support-experience.html</link><description>&lt;p&gt;So, having jumped into Apple land with a Mac Mini recently, and having some
problems, I of course took advantage of my included 90 days technical support.
Being part of the Apple ecosystem includes being subject to how they support
their customers, so I think it's important to write about.&lt;/p&gt;
&lt;p&gt;Normally my idea of support is to figure out what piece of software I'm having
a problem with, locating the open-source community responsible for it, and
then tracking down a mailing list, IRC channel, whatever, where I can ask for
help. I usually loathe help lines of any kind, as North America and most of
the world handles these very poorly these days.&lt;/p&gt;
&lt;p&gt;You know the story. You call hoping that you'll talk to a flesh and blood
human, and you get a machine telling you that, &amp;quot;we are currently experiencing
a higher than normal call volume,&amp;quot; which is what you'll hear every damn time
you call so obviously it's not higher than normal, and they're just cheap
bastards who understaff their support infrastructure, but I digress.&lt;/p&gt;
&lt;p&gt;Well, I collected a few questions together before calling Apple Canada, as I
hate calling help lines so I figured once I found a human I'd hammer him/her
with several questions. Better throughput. Can't help it, I think like a
programmer. And, of course, I got a machine. I asked me what product I was
calling about, using voice recognition to understand me as I said, &amp;quot;Mac Mini&amp;quot;,
and asked me for the serial number. That all worked, and I finally got a
human, with little difficulty. No Indian accent either, I think it was
Spanish, but I've called a few times since and there's no discernable pattern,
so perhaps it's not overseas for a change. Not that I care all that much, as
long as they actually help, but I've had some really bad experiences before
with uninformed first-line support reading from their scripts.&lt;/p&gt;
&lt;p&gt;Well, the guy I talked to couldn't help with the software bugs, obviously he
doesn't own the code, but he can report the issues and I can hope that a
developer at Apple will fix them. I already reported the issues at
&lt;a class="reference external" href="http://www.apple.com/feedback/"&gt;http://www.apple.com/feedback/&lt;/a&gt; anyway, and hopefully that's not a digital
black hole like most feedback pages. He did help me understand how to do a
couple of things that OS X considers advanced, like launching a terminal from
a keystroke. BTW Apple, that's pretty basic in any Linux window manager, so
please do better.&lt;/p&gt;
&lt;p&gt;Then we got down to the hardware issue I'm having. At least, I think it's
hardware. &lt;a class="reference external" href="https://discussions.apple.com/thread/4490924"&gt;Many other people&lt;/a&gt; are having the same problem. It makes me wonder
if there was a bad batch of Mac Minis out of Apple recently. I called in about
it, mentioned to the nice lady that wanted to sell me an Applecare package
that I likely wouldn't need it, as I was thinking of taking the unit back, and
suddenly I was talking to a nice man in second level support.&lt;/p&gt;
&lt;p&gt;He took the issue on personally, gave me a direct contact number to him, and
the email address, and we started swapping hardware to narrow down the
potential problems. I swapped the LCD with one upstairs, no help. Got a new
HDMI to DVI adaptor from Apple, no help. He arranged for a full unit exchange
and data migration, which was done very professionally (albiet with some data
loss that was easily made up for), unfortunately it didn't help.&lt;/p&gt;
&lt;p&gt;Finally, we're running an app from Apple to gather up logs, and I'm told that
the Engineers at Apple know what the problem is, they think it's software, and
to keep my eyes on the software updates. There was one recently in fact,
labelled graphics performance and reliability, so I wonder if that was it. I'm
waiting to see if the issue happens again.&lt;/p&gt;
&lt;p&gt;Thus far, I must say that Apple raises the bar for what good customer support
should be. I've had plenty of bad experiences with other companies, and so far
I've had mostly good ones with Apple, and now an exceptional one. The guy I'm
talking to deserves a raise. Fingers crossed that the experience continues to
be this good.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Thu, 06 Dec 2012 12:20:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-12-06:apple-support-experience.html</guid><category>Apple</category><category>Customer Service</category></item><item><title>Customizing Awesome</title><link>http://www.but-i-digress.ca/customizing-awesome.html</link><description>&lt;p&gt;As I mentioned previously, I'm currently running &lt;a class="reference external" href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt; on my netbook. While
I added suspend on lid close, I still need to customize the crap out of it. I
had nothing showing me my current battery status, so I searched around to find
the appropriate &lt;a class="reference external" href="http://www.lua.org/"&gt;lua&lt;/a&gt; code, a language that I'm still picking up.&lt;/p&gt;
&lt;p&gt;So, I hacked my &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/awesome/rc.lua&lt;/span&gt;&lt;/tt&gt; and added this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- {{{ Battery state&lt;/span&gt;

&lt;span class="c1"&gt;-- Initialize widget&lt;/span&gt;
&lt;span class="n"&gt;batwidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;textbox&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;baticon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;imagebox&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;-- Register widget&lt;/span&gt;
&lt;span class="n"&gt;vicious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batwidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vicious&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;baticon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beautiful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget_bat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;span color=&amp;#39;white&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;BAT0&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then added the widget to the top of my screen. I was warned on the awesome
mailing list (the name does confuse the english language) that I had to be
careful where to put it, since the tasklist is greedy and will take all
available space.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mywibox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mylauncher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mytaglist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;mypromptbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;awful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftright&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;mylayoutbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;mytextclock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;mysystray&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;baticon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batwidget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baticon&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mytasklist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;awful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightleft&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, it works. Now I need a system load, cpu load, etc. And I should hack the
keybindings, although I'm getting used to the default ones. Maybe update the
default layout since I prefer maximized layout.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Wed, 28 Nov 2012 07:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-28:customizing-awesome.html</guid><category>Linux</category><category>FOSS</category><category>Awesome WM</category></item><item><title>Tweeting on OS X</title><link>http://www.but-i-digress.ca/tweeting-on-osx.html</link><description>&lt;p&gt;For some time my desktop has been an older, underpowered Linux box, so using
services like &lt;a class="reference external" href="http://www.twitter.com"&gt;Twitter&lt;/a&gt; via the website has been painful, as loaded with heavy
javascript that would consume my CPU's limited resources.&lt;/p&gt;
&lt;p&gt;So, like any &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; programmer would do, I wrote my own client. Well, lets be
honest, the hard work was done by the &lt;a class="reference external" href="https://github.com/tweepy/tweepy"&gt;tweepy&lt;/a&gt; library, I'm just using it. I
call it &lt;a class="reference external" href="https://github.com/msoulier/twit"&gt;Twit&lt;/a&gt;, and I've been using it to post for some time now, lightweight
from the command-line. I also keep one running, polling my account for new
posts, and notifying me when there are new posts and pulling them down.&lt;/p&gt;
&lt;p&gt;My notifications come in many forms, depending on the command-line options. I
can just watch them show up in text in the shell, I can use &lt;a class="reference external" href="http://freecode.com/projects/xosd"&gt;xosd&lt;/a&gt; to display
notifications on your X11 desktop, It can use &lt;a class="reference external" href="http://developer-next.gnome.org/libnotify/"&gt;libnotify&lt;/a&gt; in Gnome to display
temporary notifications that drop down in the corner of the screen.&lt;/p&gt;
&lt;p&gt;As I'm now playing with an OS X desktop, libnotify isn't supported. I could
use xosd along with &lt;a class="reference external" href="http://xquartz.macosforge.org/trac/wiki"&gt;XQuartz&lt;/a&gt;, but I'd prefer more native integration with OS
X, as it does have a notification system, via &lt;a class="reference external" href="https://developer.apple.com/library/mac/#releasenotes/Cocoa/AppKit.html"&gt;AppKit&lt;/a&gt;. Python is preinstalled
on OS X, and the AppKit module is included. I found a &lt;a class="reference external" href="https://github.com/albertz/music-player/blob/master/notifications.py"&gt;great example&lt;/a&gt; of how
to use it online, which made this much, much simpler, so thanks there.&lt;/p&gt;
&lt;p&gt;I used it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_appkit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Thanks to&lt;/span&gt;
&lt;span class="sd"&gt;    https://github.com/albertz/music-player/blob/master/notifications.py&lt;/span&gt;
&lt;span class="sd"&gt;    for how to do this.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;notifCenter&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;AppKit&lt;/span&gt;
        &lt;span class="n"&gt;notifCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
            &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSUserNotificationCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultUserNotificationCenter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;appDelegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setDelegate_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appDelegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;notif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppKit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSUserNotification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tweet by &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTitle_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setInformativeText_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notifCenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliverNotification_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notif&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this does cause a little icon on the dock to jump up and down, so I'll
need to look into that, and how to open the browser to twitter or the embedded
link when the notification is clicked on, but it's a good start.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sun, 25 Nov 2012 09:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-25:tweeting-on-osx.html</guid><category>OS X</category><category>Python</category><category>FOSS</category></item><item><title>Suspend on lid close in Debian Squeeze</title><link>http://www.but-i-digress.ca/suspend-on-lid-close-debian-squeeze.html</link><description>&lt;p&gt;I recently decided that &lt;a class="reference external" href="http://www.gnome.org"&gt;Gnome&lt;/a&gt; is not the best desktop for my little &lt;a class="reference external" href="http://www.asus.com/Eee/"&gt;EeePC&lt;/a&gt;
netbook with a little 10.5&amp;quot; screen. So I'm playing around with a window
manager that mainly just maximizes everything. I've tried &lt;a class="reference external" href="http://www.nongnu.org/ratpoison/"&gt;Ratpoison&lt;/a&gt;, I've
tried &lt;a class="reference external" href="https://code.google.com/p/wmii/"&gt;wmii&lt;/a&gt;, and now I'm trying &lt;a class="reference external" href="http://awesome.naquadah.org/"&gt;Awesome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have a lot of customizations to do, but one thing that was missing was a way
to suspend the netbook when the laptop lid is closed. I could manually run
&lt;tt class="docutils literal"&gt;acpitool &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/tt&gt; in a shell, or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pm-suspend&lt;/span&gt;&lt;/tt&gt;, but it's best handled by DBus, as
intended.&lt;/p&gt;
&lt;p&gt;Now, a simple way to have DBus do the work is using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dbus-send&lt;/span&gt;&lt;/tt&gt;, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dbus-send --print-reply \
          --system \
          --dest=org.freedesktop.UPower \
          /org/freedesktop/UPower \
          org.freedesktop.UPower.Suspend
&lt;/pre&gt;
&lt;p&gt;The hard part is subscribing to the lid close event, so I'm not polling all
the time, exactly what DBus was written to prevent. I had a Python script for
this, but the API was changed in Squeeze to use the &lt;a class="reference external" href="http://upower.freedesktop.org/"&gt;UPower&lt;/a&gt; daemon and API.&lt;/p&gt;
&lt;p&gt;I had to do some poking around to figure out how to update it, but I just got
it working, so I thought I'd share.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dbus.mainloop.glib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DBusGMainLoop&lt;/span&gt;

&lt;span class="n"&gt;pow_prop_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;pow_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_lidclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;#39;LidIsClosed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lid is closed, suspending&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;pow_iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Suspend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lid is open&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pow_iface&lt;/span&gt;

    &lt;span class="n"&gt;DBusGMainLoop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_as_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemBus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;power_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;org.freedesktop.UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;#39;/org/freedesktop/UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pow_prop_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power_proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s"&gt;&amp;#39;org.freedesktop.DBus.Properties&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pow_iface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power_proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s"&gt;&amp;#39;org.freedesktop.UPower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Registering a signal receiver for upower events...&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_signal_receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle_lidclose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;dbus_interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.freedesktop.UPower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;signal_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I just run it in the background from my &lt;cite&gt;.xsession&lt;/cite&gt; script at X11 login,
and it's sitting there waiting for any change in UPower status. Works like a
charm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Tue, 20 Nov 2012 22:10:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-20:suspend-on-lid-close-debian-squeeze.html</guid><category>Linux</category><category>FOSS</category><category>Python</category></item><item><title>Joysticks? We don't need no stinking joysticks...</title><link>http://www.but-i-digress.ca/apple-and-joysticks.html</link><description>&lt;p&gt;So, after unpackaging my brand-spanking new Mac Mini, I grabbed a copy of the
&lt;a class="reference external" href="http://www.x-plane.com"&gt;X-Plane&lt;/a&gt; demo, dropped in an old usb joystick and fired it up. Oddly, X-Plane
itself asked me if I wanted to calibrate the joystick, which struck me as odd,
that hasn't happened in years, not since my days with plain old DOS. DOS
didn't have a controller subsystem so there was no way to calibrate a joystick
once, for all apps, but Microsoft fixed that long, long ago. Even Linux has
&lt;a class="reference external" href="gentle-taiga-2880"&gt;jscal&lt;/a&gt; to allow the same thing. It's command-line, but it works.&lt;/p&gt;
&lt;p&gt;So of course I assumed that on a Mac, with it's reputation for dead simple
plug and play, everything just works, dead simple and easy, it would have the
same right? Umm, no. No command-line tool, no graphical tool, no voice
activated tool, no swiping on my LCD, nothing. It's left up to the
application, kinda like DOS. Way to go Apple.&lt;/p&gt;
&lt;p&gt;Now, why do I care, since X-Plane has such a utility? Well, in X-Plane, I
don't. But after downloading and installing Flightgear, I do. They leave the
joystick calibration up to the OS, and rightly so. So, I can't use the
joystick in Flightgear, not that I'd want to use it on this machine anyway, as
I've already found out that the OpenGL rendering performance on the Mac Mini
is horrid. Wow, another strike over my cheap Linux box sitting next to me that
was made out of spare parts from a friend's basement. That is truly, utterly,
sad.&lt;/p&gt;
&lt;p&gt;Seriously Apple, is that the best you can do? If you think I'm interested in
tilting an ipad to fly a plane in any realistic simulation, you guys have been
smoking way too much of what you usually smoke. I want realism, and last time
I flew, the pilot didn't have to lean to bank the plane. At least, I hope not,
the door was closed and locked, post-9/11 and all, but I digress.&lt;/p&gt;
&lt;p&gt;Bottom line Apple, for what I paid for this thing, you could have done much,
much better in this regard. X-Plane rocks, but Intel graphics in the mini?
Pleease, put a smoking Nvidia chipset in there and give me a decent framerate
for games!&lt;/p&gt;
&lt;p&gt;Are you listening?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Mon, 19 Nov 2012 13:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-19:apple-and-joysticks.html</guid><category>OS X</category></item><item><title>Umm, done unzipping yet?</title><link>http://www.but-i-digress.ca/umm-done-unzipping-yet.html</link><description>&lt;p&gt;So, the first thing I did after after wrapping my head around the cocoa
interface was to start installing software like a madman. I wanted Firefox,
VLC, Kobo, Gimp, Vim, etc, etc, etc. So, I had to learn how to install apps on
OS X.&lt;/p&gt;
&lt;p&gt;Apps in OS X seem to come in at least two different forms: .app files, which
are self-contained application packages that you simply drop into
&lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; on the system (totally awesome), and .pkg files, which are
more windows-like installers.&lt;/p&gt;
&lt;p&gt;The latter seems to be required with more complex installs, like plug-ins that
need to put files in privileged places all over the system, requiring root
access to install. As an admin user, I can already put .app files into
&lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; without root access, the implications of which are that a
virus could infect the apps in &lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt; too, so that's a strike,
security-wise, for OS X over Linux. Still better than Windows though, where a
Power User can change anything under &lt;tt class="docutils literal"&gt;Program Files&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;Windows&lt;/tt&gt; without
escalating privileges.&lt;/p&gt;
&lt;p&gt;The .app files or .pkg files can come in many forms, the most common of which
is a .dmg file, which is a disk image that OS X will casually mount on a
loopback. I've noticed that the &lt;tt class="docutils literal"&gt;Finder&lt;/tt&gt; can mount .dmg and .iso files with
a simple click. With an .app file, you just drag it to &lt;tt class="docutils literal"&gt;/Applications&lt;/tt&gt;, and
you're done, and uninstalling is just a simple. Far superior to &lt;em&gt;any&lt;/em&gt; OS that
I've used in the past. It's also common to download .zip files, which clicking
on in the &lt;tt class="docutils literal"&gt;Finder&lt;/tt&gt; fires-up the &lt;tt class="docutils literal"&gt;Archive Utility&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So there I was, clicking along and installing, and then a progress bar
indicating that the .zip file was opening just kept going, and going, and
going. I looked online, and found that &lt;a class="reference external" href="http://apple.stackexchange.com/questions/70160/can-i-fix-things-so-archive-utility-doesnt-hang-on-all-zip-files"&gt;I am not alone&lt;/a&gt; in having this
problem. Apparently, the &lt;tt class="docutils literal"&gt;appleeventsd&lt;/tt&gt; daemon requires killing under those
circumstances, something that the nice guy at Apple support did not know.
Looks like the issue is in OS X 10.8.2, which I am running.&lt;/p&gt;
&lt;p&gt;Hmm. Bad timing in jumping on the Apple bandwagon? I wonder how long they'll
take to fix the issue. Good test for what it will be like to live as part of
Apple's ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Sat, 17 Nov 2012 14:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-17:umm-done-unzipping-yet.html</guid><category>OS X</category></item><item><title>Ok, nobody panic, there's a fruit on my screen</title><link>http://www.but-i-digress.ca/fruit-on-my-screen.html</link><description>&lt;p&gt;I've needed a new desktop for a while now. As I'm primarily a Unix user, I
typically buy a cheap PC and put &lt;a class="reference external" href="http://www.linux.org"&gt;Linux&lt;/a&gt; on it. This involves doing a bunch of
research into available hardware to make sure that everything is going to
work, like accelerated graphics for any games I'd like to play, supported
network drivers, etc. Over the years it's gotten easier and easier to get
Linux working on a box, but sometimes I still have to work to get something
working.&lt;/p&gt;
&lt;p&gt;The end result is a working Linux workstation that I can use for work, and my
basic computing needs, often involving fighting with the fact that noone wants
to support it or any software that I'm using. That part does get old year
after year.&lt;/p&gt;
&lt;p&gt;For example, I bought a &lt;a class="reference external" href="http://www.kobobooks.com"&gt;Kobo&lt;/a&gt; ages ago, and I had to use a Windows box to run
the Kobo desktop software, to patch its firmware and put books on it. Later I
found out that I could just copy .epub books into it like a flash drive, which
is awesome by the way Kobo, but you get the idea. For my iPod shuffle, I copy
mp3s onto it and run the rebuild_db Python script to update the db on the
iPod. There are workarounds for these issues, but sometimes it's nice to just
plug something in and have it work. And fighting with my devices isn't as much
fun as it used to be. I'm too damn busy.&lt;/p&gt;
&lt;p&gt;So, based the recommendations of various friends and colleagues, I decided to
take the plunge with my new desktop, and try a &lt;a class="reference external" href="http://www.apple.com/mac-mini/"&gt;Mac Mini&lt;/a&gt; from &lt;a class="reference external" href="http://www.apple.com"&gt;Apple&lt;/a&gt;, running
&lt;a class="reference external" href="http://www.apple.com/osx/"&gt;Mac OS X&lt;/a&gt; 10.8, &amp;quot;Mountain Lion&amp;quot;. I figured that it's a lot better supported
in commercial software land, while being &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Darwin_%28operating_system%29"&gt;BSD Unix&lt;/a&gt; underneath, so maybe it's
the best of both worlds.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="http://www.but-i-digress.ca/static/images/apple-logo1.jpg" src="http://www.but-i-digress.ca/static/images/apple-logo1.jpg" style="width: 289px; height: 350px;" /&gt;
&lt;/div&gt;
&lt;p&gt;I need to customize the crap out of it, and get used to the interface and
keybindings, and do a lot of reading. I hope to post my experiences here, so
stay tuned if you're interested.&lt;/p&gt;
&lt;p&gt;Sure, I could have just thrown Linux on another box, and maybe I still will,
but I've &lt;em&gt;done&lt;/em&gt; that. I felt like doing something new.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael P. Soulier</dc:creator><pubDate>Fri, 16 Nov 2012 18:00:00 -0500</pubDate><guid>tag:www.but-i-digress.ca,2012-11-16:fruit-on-my-screen.html</guid><category>OS X</category></item></channel></rss>